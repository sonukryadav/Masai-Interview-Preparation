diff --git a/src/index.js b/src/index.js
index 90ff7fa3d7d4fa62dbbf638958ae4e28abd089a8..28434687b5163b7472e86bdb11bed69e0868e660 100644
--- a/src/index.js
+++ b/src/index.js
@@ -1,4 +1,4 @@
-import { mockConsole, createConsole } from './pure';
+import { mockConsole, createConsole } from './pure.js';
 
 // Keep an instance of the original console and export it
 const originalConsole = global.console;
diff --git a/src/pure.js b/src/pure.js
index b00ea2abbaea833e336676aa46e7ced2d59d6d88..42b83ed83fa16cf2234571500fe09868debd9f01 100644
--- a/src/pure.js
+++ b/src/pure.js
@@ -228,10 +228,11 @@ export function restore() {
   global.console = global.originalConsole;
 }
 
+/*
 if (typeof expect === 'function' && typeof expect.extend === 'function') {
   expect.extend({
     toMatchInlineSnapshot(received, ...args) {
-      /* ------- Workaround for custom inline snapshot matchers ------- */
+      // Workaround for custom inline snapshot matchers
       const error = new Error();
       const stacks = error.stack.split('\n');
 
@@ -245,7 +246,6 @@ if (typeof expect === 'function' && typeof expect.extend === 'function') {
       error.stack = stacks.join('\n');
 
       const context = Object.assign(this, { error });
-      /* -------------------------------------------------------------- */
 
       const testingConsoleInstance =
         (received && received.testingConsole) || received;
@@ -270,3 +270,4 @@ if (typeof expect === 'function' && typeof expect.extend === 'function') {
     },
   });
 }
+*/
\ No newline at end of file
